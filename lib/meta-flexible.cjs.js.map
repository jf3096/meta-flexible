{"version":3,"file":"meta-flexible.cjs.js","sources":["../src/index.js"],"sourcesContent":["(function (window, document, apiMetaFlexibleOptions) {\r\n  /**\r\n   * 标记版本, 自动生成版本号\r\n   * @type {string}\r\n   */\r\n  apiMetaFlexibleOptions.version = '<@VERSION@>';\r\n\r\n  /**\r\n   * 计算文字大小比例差, 用于检查用户在手机浏览器中发大了字体导致响应式失效\r\n   */\r\n  const computeDiffFontSizeRatio = (() => {\r\n    let diffFontSizeRatio;\r\n    /**\r\n     * 当前实际字体大小, 用于检查用户在手机浏览器中发大了字体导致响应式失效\r\n     * @returns {number}\r\n     */\r\n    const computeActualFontSize = () => {\r\n      return +getComputedStyle(document.documentElement).getPropertyValue('font-size').replace(/px/, '');\r\n    };\r\n    return () => {\r\n      if (!diffFontSizeRatio) {\r\n        const rawDocElementCssText = document.documentElement.style.cssText;\r\n        document.documentElement.style.cssText = 'font-size:100px !important';\r\n        const docElementStyleFontSize = 100;\r\n        const actualFontSize = computeActualFontSize();\r\n        diffFontSizeRatio = actualFontSize / docElementStyleFontSize;\r\n        document.documentElement.style.cssText = rawDocElementCssText;\r\n      }\r\n      return diffFontSizeRatio;\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * 方案枚举\r\n   */\r\n  const Plan = {\r\n    TargetDensityDpi: 0,\r\n    ScaleRatio: 1,\r\n    Rem: 2,\r\n    Viewpoint: 3\r\n  };\r\n\r\n  /**\r\n   * 是否有生效, 用于判断当前方案是否真正生效\r\n   */\r\n  const Impact = {\r\n    Yes: 1,\r\n    No: -1,\r\n    Unknown: 0\r\n  };\r\n\r\n  /**\r\n   * rem 调节大小依赖\r\n   * @type {{Auto: string, Height: string, Width: string}}\r\n   */\r\n  const RemResizeDependency = {\r\n    Width: 'width',\r\n    Height: 'height',\r\n    Auto: 'auto',\r\n    UseBiggerSize: 'useBiggerSize',\r\n    UseSmallerSize: 'useSmallerSize'\r\n  };\r\n\r\n  /**\r\n   * no operation\r\n   * @param f\r\n   * @returns {*}\r\n   */\r\n  const noop = f => f;\r\n\r\n  /**\r\n   *  默认options, 当前client属性为保留字段, 可接受 'pc' | 'mobile'\r\n   * @type {{enableBodyFontSize: boolean, enableViewpointFitForIphoneX: boolean, disableReportPlanNotWorkingErrorOnce: boolean, Plan: {ScaleRatio: number, Viewpoint: number, Rem: number, TargetDensityDpi: number}, onBeforeApplyPlan: (function(*): *), designViewpoint: number, remUpperResizeLimit: number, plans: number[], remResizeDependency: string, namespace: string, fixRemManualSettingFontResize: boolean, client: undefined, getMetaViewpointScaleRatioContent(*, *=): string, applyResponsePlanOnce: boolean, isMobile: (function(): boolean), remRatio: number, getMetaViewpointTargetDensityDpiContent(*, *=): string}}\r\n   */\r\n  const defaultMetaFlexibleOptions = {\r\n    /**\r\n     * 日志命名空间\r\n     */\r\n    namespace: 'meta-flexible',\r\n    /**\r\n     * 根据设计稿大小设置即可\r\n     */\r\n    designViewpoint: 750,\r\n    /**\r\n     * meta viewpoint content, 细节请参考返回值\r\n     * @param designViewpoint\r\n     * @param enableViewpointFitForIphoneX\r\n     * @return {string}\r\n     */\r\n    getMetaViewpointTargetDensityDpiContent(designViewpoint, enableViewpointFitForIphoneX) {\r\n      return [\r\n        `width=${designViewpoint}`,\r\n        'target-densitydpi=device-dpi',\r\n        'user-scalable=no',\r\n        enableViewpointFitForIphoneX && 'viewport-fit=cover',\r\n      ].filter(Boolean).join(', ');\r\n    },\r\n    /**\r\n     * meta viewpoint content, 细节请参考返回值\r\n     * @param scale\r\n     * @param enableViewpointFitForIphoneX\r\n     * @return {string}\r\n     */\r\n    getMetaViewpointScaleRatioContent(scale, enableViewpointFitForIphoneX) {\r\n      return [\r\n        'width=device-width',\r\n        'initial-scale=1',\r\n        `maximum-scale=${scale}`,\r\n        `minimum-scale=${scale}`,\r\n        'user-scalable=no',\r\n        enableViewpointFitForIphoneX && 'viewport-fit=cover'\r\n      ].filter(Boolean).join(', ');\r\n    },\r\n    /**\r\n     * 判断是否是移动端\r\n     * @return {boolean}\r\n     */\r\n    isMobile: () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|HuaweiBrowser|ArkWeb/i.test(navigator.userAgent),\r\n    /**\r\n     * 降级方案顺序\r\n     */\r\n    plans: [Plan.TargetDensityDpi, Plan.ScaleRatio],\r\n    /**\r\n     * 方案枚举\r\n     */\r\n    Plan,\r\n    /**\r\n     * 是否设置body字体\r\n     */\r\n    enableBodyFontSize: false,\r\n    /**\r\n     * 是否开启viewpoint fit\r\n     */\r\n    enableViewpointFitForIphoneX: false,\r\n    /**\r\n     * rem 比例\r\n     */\r\n    remRatio: 10,\r\n    /**\r\n     * rem最大上限, 通过设置该字段防止页面无限放大\r\n     */\r\n    remUpperResizeLimit: 540,\r\n    /*\r\n     * rem 缩放基准依赖, 有效值为 width|height|auto\r\n     * 当缩放基准依赖为 width 时, 页面会根据宽度缩放而变化 html root 的 fontSize 大小\r\n     * 当缩放基准依赖为 height 时, 页面会根据高度缩放而变化 html root 的 fontSize 大小\r\n     * 当缩放基准依赖为 auto 时, 页面会根据宽高比决定, 并选择较小的值作为基准值\r\n     * 默认: width\r\n     */\r\n    remResizeDependency: RemResizeDependency.Width,\r\n    /**\r\n     * 标记当前客户端, 参考值 pc | mobile\r\n     */\r\n    client: undefined,\r\n    /**\r\n     * 禁止 ReportPlanNotWorkingErrorOnce\r\n     */\r\n    disableReportPlanNotWorkingErrorOnce: true,\r\n    /**\r\n     * 是否修复手动在(浏览器)中设置字体大小, 这会导致在 rem 方案中让响应式失效\r\n     */\r\n    fixRemManualSettingFontResize: true,\r\n    /**\r\n     * 在应用方案前进行相关处理\r\n     */\r\n    onBeforeApplyPlan: noop,\r\n    /**\r\n     * 仅执行一次响应式方案, 这样的目的是在 resize 后不对页面响应式继续做其他操作\r\n     */\r\n    applyResponsePlanOnce: false\r\n  };\r\n\r\n  /**\r\n   * 合并外部API Options\r\n   * @type {{enableBodyFontSize: boolean, enableViewpointFitForIphoneX: boolean, disableReportPlanNotWorkingErrorOnce: boolean, Plan: {ScaleRatio: number, Viewpoint: number, Rem: number, TargetDensityDpi: number}, onBeforeApplyPlan: (function(*): *), designViewpoint: number, remUpperResizeLimit: number, plans: number[], remResizeDependency: string, namespace: string, fixRemManualSettingFontResize: boolean, client: undefined, getMetaViewpointScaleRatioContent, (*, *=): string, isMobile: (function(): boolean), remRatio: number, getMetaViewpointTargetDensityDpiContent, (*, *=): string}|*|{}}\r\n   */\r\n  const metaFlexibleOptions = {...defaultMetaFlexibleOptions, ...apiMetaFlexibleOptions};\r\n\r\n  /**\r\n   * 拉取 meta TargetDensityDpiContent 模板\r\n   */\r\n  const getMetaViewpointTargetDensityDpiContent = metaFlexibleOptions.getMetaViewpointTargetDensityDpiContent;\r\n\r\n  /**\r\n   * 拉取 meta ScaleRatio 模板\r\n   * @param scale\r\n   * @returns {string}\r\n   */\r\n  const getMetaViewpointScaleRatioContent = metaFlexibleOptions.getMetaViewpointScaleRatioContent;\r\n\r\n  /**\r\n   * 命名空间\r\n   * @type {string}\r\n   */\r\n  const NAMESPACE = metaFlexibleOptions.namespace;\r\n\r\n  /**\r\n   * 错误前缀\r\n   * @type {string}\r\n   */\r\n  const LOG_PREFIX = NAMESPACE;\r\n\r\n  /**\r\n   * 设计稿大小\r\n   * @type {number}\r\n   */\r\n  const designViewpoint = metaFlexibleOptions.designViewpoint;\r\n\r\n  /**\r\n   * 是否启用viewpoint fit, 该属性仅对iphone-x生效\r\n   * @type {boolean}\r\n   */\r\n  const enableViewpointFitForIphoneX = metaFlexibleOptions.enableViewpointFitForIphoneX;\r\n\r\n  /**\r\n   * 拉取 document 元素\r\n   * @type {Element}\r\n   */\r\n  const docEl = document.documentElement;\r\n\r\n  // noinspection JSUnresolvedVariable\r\n  /**\r\n   * 判断当前 window dpr 比例，若无直接降级使用 1\r\n   * @type {*|number}\r\n   */\r\n  const dpr = window.devicePixelRatio || 1;\r\n\r\n  /**\r\n   * plan 列表\r\n   */\r\n  // const plans = metaFlexibleOptions.plans;\r\n\r\n  /**\r\n   * rem的基准值, 如 remRatio = 10, 即在750px设计稿中, 1rem = 75px\r\n   */\r\n  // const remRatio = metaFlexibleOptions.remRatio;\r\n\r\n  /**\r\n   * rem 页面宽度变化最大上限, 当大于 remUpperResizeLimit, 根节点 font-size 将不再变化\r\n   */\r\n  // const remUpperResizeLimit = metaFlexibleOptions.remUpperResizeLimit;\r\n  /**\r\n   * 禁止 ReportPlanNotWorkingErrorOnce\r\n   */\r\n  // const disableReportPlanNotWorkingErrorOnce = metaFlexibleOptions.disableReportPlanNotWorkingErrorOnce;\r\n  /*\r\n   * rem 缩放基准依赖, 有效值为 width|height|auto\r\n   * 当缩放基准依赖为 width 时, 页面会根据宽度缩放而变化 html root 的 fontSize 大小\r\n   * 当缩放基准依赖为 height 时, 页面会根据高度缩放而变化 html root 的 fontSize 大小\r\n   * 当缩放基准依赖为 auto 时, 页面会根据宽高比决定, 并选择较小的值作为基准值\r\n   * 默认: width\r\n   */\r\n  // const remResizeDependency = metaFlexibleOptions.remResizeDependency;\r\n  /**\r\n   * 是否修复手动在(浏览器)中设置字体大小, 这会导致在 rem 方案中让响应式失效\r\n   * @type {boolean}\r\n   */\r\n  // const fixRemManualSettingFontResize = metaFlexibleOptions.fixRemManualSettingFontResize;\r\n\r\n  /**\r\n   * 在页面 resize 时触发\r\n   * @type {function(*): *}\r\n   */\r\n\r\n  // const onBeforeResize = metaFlexibleOptions.onBeforeResize;\r\n\r\n  /**\r\n   * 条件判错函数\r\n   * @param condition 错误条件\r\n   * @param message\r\n   */\r\n  function invariant(condition, message) {\r\n    if (!condition) {\r\n      throw new Error(`${LOG_PREFIX}: ${message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 条件警告函数\r\n   * @param condition 警告条件\r\n   * @param message 警告信息\r\n   */\r\n  function warn(condition, message) {\r\n    if (!condition) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`${LOG_PREFIX}: ${message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判定页面中是否已经被手动设置 meta\r\n   */\r\n  function invariantMetaViewPoint() {\r\n    const metaViewPointElement = getMetaViewpointElement();\r\n    invariant(!metaViewPointElement, '在使用当前工具库时请勿使用自定义viewpoint meta. viewpoint meta 将会通过当前工具自动计算生成.');\r\n  }\r\n\r\n  /**\r\n   * 获取 meta viewpoint\r\n   */\r\n  function getMetaViewpointElement() {\r\n    return document.querySelector('meta[name=\"viewport\"]');\r\n  }\r\n\r\n  /**\r\n   * 设置 body 字体大小, 来自原本的 lib-flexible 源码, 作用暂未知\r\n   */\r\n  function setBodyFontSize() {\r\n    if (document.body) {\r\n      document.body.style.fontSize = (12 * dpr) + 'px';\r\n    } else {\r\n      document.addEventListener('DOMContentLoaded', setBodyFontSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建或更新 meta view point\r\n   * @param metaViewpoint {Element} - 如果传入的 metaViewpoint已经存在, 则直接更新即可\r\n   * @param content {String} - viewpoint 内容\r\n   * @returns {*}\r\n   */\r\n  function createOrUpdateMetaViewpoint(metaViewpoint, content) {\r\n    const isAppended = !!metaViewpoint;\r\n    if (isAppended) {\r\n      metaViewpoint.setAttribute('content', content);\r\n    } else {\r\n      const metaViewpointElement = getMetaViewpointElement();\r\n      if (!metaViewpointElement) {\r\n        metaViewpoint = document.createElement('meta');\r\n        metaViewpoint.setAttribute('name', 'viewport');\r\n      } else {\r\n        metaViewpoint = metaViewpointElement;\r\n      }\r\n      metaViewpoint.setAttribute('content', content);\r\n      const headElement = docEl.querySelector('head');\r\n      if (headElement) {\r\n        headElement.appendChild(metaViewpoint);\r\n      } else {\r\n        const wrap = document.createElement('div');\r\n        wrap.appendChild(metaViewpoint);\r\n        document.write(wrap.innerHTML);\r\n      }\r\n    }\r\n    return metaViewpoint;\r\n  }\r\n\r\n  /**\r\n   * 设置 targetDensityDpi meta\r\n   */\r\n  const setMetaViewpointTargetDensityDpi = (() => {\r\n    let isAppended = false;\r\n    let orientationChangeCounter = 0;\r\n    return () => {\r\n      if (!isAppended) {\r\n        createOrUpdateMetaViewpoint(void 0, getMetaViewpointTargetDensityDpiContent(designViewpoint, enableViewpointFitForIphoneX));\r\n        /**\r\n         * 处理在 ios iphone 6 (可能也涉及其他机型), 在翻转手机后当值 targetdensity 方案失效, window.innerWidth 异常, 不等于 designViewpoint\r\n         */\r\n        window.addEventListener('orientationchange', () => {\r\n          /**\r\n           * 且这个行为发生在翻转过程的某一个时间点, 所以需要等待若干时间, 目前测试等待setTimeout时间, 100 (无效), 150 (偶然), 200(可用), 250(较稳)\r\n           * 但不确定是否可能在性能低的时候翻转时间延长导致失效\r\n           */\r\n          setTimeout(() => {\r\n            if (window.innerWidth !== designViewpoint) {\r\n              orientationChangeCounter++;\r\n              if (orientationChangeCounter > 5) {\r\n                orientationChangeCounter = 0;\r\n              }\r\n              createOrUpdateMetaViewpoint(void 0, getMetaViewpointTargetDensityDpiContent(designViewpoint + orientationChangeCounter / 1000, enableViewpointFitForIphoneX));\r\n            }\r\n          }, 250);\r\n        });\r\n        isAppended = true;\r\n      }\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * 设置 targetDensityDpi meta\r\n   */\r\n  const setMetaViewpointScaleRatio = (() => {\r\n    let metaViewpoint;\r\n    /**\r\n     * 缓存先前scale值\r\n     */\r\n    let prevScale;\r\n    return (scale) => {\r\n      if (prevScale !== scale) {\r\n        prevScale = scale;\r\n        metaViewpoint = createOrUpdateMetaViewpoint(metaViewpoint, getMetaViewpointScaleRatioContent(scale, enableViewpointFitForIphoneX));\r\n      }\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * 上报错误, 异步抛异常, 用于上报\r\n   */\r\n  const reportPlanNotWorkingErrorOnce = (() => {\r\n    const hasReported = false;\r\n    return () => {\r\n      const errorMessage = `${NAMESPACE}所使用的所有方案失效, 暂用最后一种方案兜底`;\r\n      if (!metaFlexibleOptions.disableReportPlanNotWorkingErrorOnce) {\r\n        if (!hasReported) {\r\n          setTimeout(() => invariant(false, errorMessage), 0);\r\n        }\r\n      } else {\r\n        // eslint-disable-next-line no-console\r\n        console.warn(errorMessage);\r\n      }\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * 应用响应式方案\r\n   */\r\n  const applyResponsePlan = (() => {\r\n    /**\r\n     * 是否生效,默认情况下是No\r\n     */\r\n    let hasImpact = Impact.No;\r\n    /**\r\n     * 用于存储当前方案\r\n     */\r\n    let currentPlan;\r\n\r\n    return () => {\r\n      /**\r\n       * 在方案之前之前允许用户更新或操作 metaFlexible\r\n       * TODO: 当修改 plan 时可能会出现与闭包缓存值不一致的场景\r\n       */\r\n      metaFlexibleOptions.onBeforeApplyPlan(metaFlexibleOptions);\r\n\r\n      /**\r\n       * 如果已经发现当前方案已生效, 直接使用当前方案即可, 不再继续尝试后续方案\r\n       */\r\n      if (hasImpact === Impact.Yes) {\r\n        /**\r\n         * 第一个方案作为当前使用方案\r\n         */\r\n        implementPlan(currentPlan);\r\n        return;\r\n      }\r\n      if (metaFlexibleOptions.plans.length === 0) {\r\n        hasImpact = Impact.Yes;\r\n        implementPlan(currentPlan);\r\n        return;\r\n      }\r\n      while (hasImpact === Impact.No) {\r\n        if (metaFlexibleOptions.plans[0] !== undefined) {\r\n          /**\r\n           * 指向当前方案\r\n           */\r\n          currentPlan = metaFlexibleOptions.plans[0];\r\n        }\r\n        /**\r\n         * 如果所有方案失效, 直接抛异常, 用于上报, 但保留最后一种方案\r\n         */\r\n        if (metaFlexibleOptions.plans.length <= 0) {\r\n          reportPlanNotWorkingErrorOnce();\r\n          break;\r\n        }\r\n        /**\r\n         * 是否有生效\r\n         */\r\n        hasImpact = hasPlanImpact(() => implementPlan(currentPlan));\r\n        /**\r\n         * 如果发现方案失效, 直接抛弃方案列表第一项\r\n         */\r\n        if (hasImpact === Impact.No) {\r\n          metaFlexibleOptions.plans.shift();\r\n        }\r\n      }\r\n      /**\r\n       * 当是否生效是未知时, 如: 当前页面大小完全等于预设的值 (设计稿大小), 那么无法判断是否生效\r\n       * 当出现以上情况时, 重置 hasImpact = 无效, 让下一轮再次触发当前函数时在判定\r\n       */\r\n      hasImpact === Impact.Unknown && (hasImpact = Impact.No);\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * 方案具体实现函数, 根据枚举选择方案\r\n   */\r\n  function implementPlan(currentPlan) {\r\n    switch (currentPlan) {\r\n      case Plan.TargetDensityDpi:\r\n        targetDensityDpiImpl();\r\n        break;\r\n      case Plan.ScaleRatio:\r\n        scaleRatioImpl();\r\n        break;\r\n      case Plan.Rem:\r\n        remImpl();\r\n        break;\r\n      case Plan.Viewpoint:\r\n        viewpointImpl();\r\n        break;\r\n      default:\r\n        invariant(false, `未知 meta-flexible 方案, plan = ${currentPlan}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * rem 方案具体实现\r\n   */\r\n  function remImpl() {\r\n    setMetaViewpointScaleRatio(1);\r\n    refreshRem();\r\n  }\r\n\r\n  /**\r\n   * viewpoint 方案具体实现\r\n   */\r\n  function viewpointImpl() {\r\n    setMetaViewpointScaleRatio(1);\r\n    refreshRem(false);\r\n  }\r\n\r\n  /**\r\n   * 刷新Rem\r\n   * @param hasResizeLimit\r\n   */\r\n  function refreshRem(hasResizeLimit = true) {\r\n    let base;\r\n    const {remResizeDependency, remUpperResizeLimit, remRatio, fixRemManualSettingFontResize} = metaFlexibleOptions;\r\n    if (remResizeDependency === RemResizeDependency.Width) {\r\n      base = docEl.clientWidth;\r\n    } else if (remResizeDependency === RemResizeDependency.Height) {\r\n      base = docEl.clientHeight;\r\n    } else if (remResizeDependency === RemResizeDependency.Auto || remResizeDependency === RemResizeDependency.UseSmallerSize) {\r\n      base = Math.min(docEl.clientWidth, docEl.clientHeight);\r\n    } else if (remResizeDependency === RemResizeDependency.UseBiggerSize) {\r\n      base = Math.max(docEl.clientWidth, docEl.clientHeight);\r\n    }\r\n    if (hasResizeLimit) {\r\n      if (base > remUpperResizeLimit) {\r\n        base = remUpperResizeLimit;\r\n      }\r\n    }\r\n    let rem = base / remRatio;\r\n    if (fixRemManualSettingFontResize) {\r\n      rem = rem / computeDiffFontSizeRatio();\r\n    }\r\n    docEl.style.fontSize = `${rem}px`;\r\n    apiMetaFlexibleOptions.rem = rem;\r\n  }\r\n\r\n  /**\r\n   * target density dpi 具体实现\r\n   */\r\n  function targetDensityDpiImpl() {\r\n    setMetaViewpointTargetDensityDpi();\r\n  }\r\n\r\n  /**\r\n   * target density dpi 具体实现\r\n   */\r\n  function scaleRatioImpl() {\r\n    const width = getScreenWidth();\r\n    let scale = width / designViewpoint;\r\n    scale > 1 && (scale = 1);\r\n    setMetaViewpointScaleRatio(scale);\r\n  }\r\n\r\n  /**\r\n   * 检查发现支持0.5px\r\n   */\r\n  function tryAddHairLine() {\r\n    if (dpr >= 2) {\r\n      const fakeBody = document.createElement('body');\r\n      const testElement = document.createElement('div');\r\n      testElement.style.border = '.5px solid transparent';\r\n      fakeBody.appendChild(testElement);\r\n      docEl.appendChild(fakeBody);\r\n      if (testElement.offsetHeight === 1) {\r\n        docEl.classList.add('hairlines');\r\n      }\r\n      docEl.removeChild(fakeBody);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 方案是否有生效\r\n   * @param action\r\n   */\r\n  function hasPlanImpact(action) {\r\n    const clientWidthBeforeMeta = docEl.clientWidth;\r\n    action();\r\n    const clientWidthAfterMeta = docEl.clientWidth;\r\n    if (getScreenWidth() === designViewpoint) {\r\n      return Impact.Unknown;\r\n    }\r\n    return clientWidthAfterMeta === clientWidthBeforeMeta ? Impact.No : Impact.Yes;\r\n  }\r\n\r\n  /**\r\n   * 获取当前屏幕宽度\r\n   * @returns {Number}\r\n   */\r\n  function getScreenWidth() {\r\n    return window.screen.width;\r\n  }\r\n\r\n  (function () {\r\n\r\n    const {enableBodyFontSize, isMobile} = metaFlexibleOptions;\r\n\r\n    if (!isMobile()) {\r\n      warn(false, `请确保在移动端下使用${NAMESPACE}`);\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * 校验判断 meta viewpoint, 禁止开发者手动添加\r\n     */\r\n    invariantMetaViewPoint();\r\n\r\n    if (enableBodyFontSize) {\r\n      /**\r\n       * 立即自执行, 设置 body font size\r\n       */\r\n      setBodyFontSize();\r\n    }\r\n    /**\r\n     * 直接触发页面\r\n     */\r\n    applyResponsePlan();\r\n\r\n\r\n    if (!metaFlexibleOptions.applyResponsePlanOnce) {\r\n      /**\r\n       * 在页面大小变更时触发更新\r\n       */\r\n      window.addEventListener('resize', (function () {\r\n        let timeoutId;\r\n        return () => {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(applyResponsePlan, 300);\r\n        };\r\n      }()));\r\n    }\r\n\r\n    /**\r\n     * onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发，\r\n     * onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\r\n     */\r\n    window.addEventListener('pageshow', (e) => {\r\n      /** @namespace e.persisted */\r\n      e.persisted && applyResponsePlan();\r\n    }, false);\r\n\r\n    /**\r\n     * 尝试加入 Hairline 标记, 用于处理 border 1px的问题\r\n     */\r\n    tryAddHairLine();\r\n\r\n    /**\r\n     * 向外部曝露applyResponsePlan\r\n     * @type {Function}\r\n     */\r\n    apiMetaFlexibleOptions.applyResponsePlan = applyResponsePlan;\r\n  }());\r\n}(window, document, window.__META_FLEXIBLE__ = window.__META_FLEXIBLE__ || {}));\r\n"],"names":["window","document","apiMetaFlexibleOptions","version","computeDiffFontSizeRatio","diffFontSizeRatio","computeActualFontSize","getComputedStyle","documentElement","getPropertyValue","replace","rawDocElementCssText","style","cssText","docElementStyleFontSize","actualFontSize","Plan","Impact","RemResizeDependency","noop","f","defaultMetaFlexibleOptions","designViewpoint","enableViewpointFitForIphoneX","filter","Boolean","join","scale","test","navigator","userAgent","TargetDensityDpi","ScaleRatio","Width","undefined","metaFlexibleOptions","getMetaViewpointTargetDensityDpiContent","getMetaViewpointScaleRatioContent","NAMESPACE","namespace","LOG_PREFIX","docEl","dpr","devicePixelRatio","invariant","condition","message","Error","warn","invariantMetaViewPoint","metaViewPointElement","getMetaViewpointElement","querySelector","setBodyFontSize","body","fontSize","addEventListener","createOrUpdateMetaViewpoint","metaViewpoint","content","isAppended","setAttribute","metaViewpointElement","createElement","headElement","appendChild","wrap","write","innerHTML","setMetaViewpointTargetDensityDpi","orientationChangeCounter","innerWidth","setMetaViewpointScaleRatio","prevScale","reportPlanNotWorkingErrorOnce","hasReported","errorMessage","disableReportPlanNotWorkingErrorOnce","applyResponsePlan","hasImpact","No","currentPlan","onBeforeApplyPlan","Yes","plans","length","hasPlanImpact","implementPlan","shift","Unknown","Rem","Viewpoint","remImpl","viewpointImpl","refreshRem","hasResizeLimit","base","remResizeDependency","remUpperResizeLimit","remRatio","fixRemManualSettingFontResize","clientWidth","Height","clientHeight","Auto","UseSmallerSize","Math","min","UseBiggerSize","max","rem","targetDensityDpiImpl","scaleRatioImpl","width","getScreenWidth","tryAddHairLine","fakeBody","testElement","border","offsetHeight","classList","add","removeChild","action","clientWidthBeforeMeta","clientWidthAfterMeta","screen","enableBodyFontSize","isMobile","applyResponsePlanOnce","timeoutId","setTimeout","e","persisted","__META_FLEXIBLE__"],"mappings":"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"}